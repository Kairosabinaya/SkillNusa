SKILLNUSA PROJECT - COMPLETE DIRECTORY STRUCTURE AND FUNCTIONS EXTRACTION
================================================================================

PROJECT OVERVIEW:
- Name: SkillNusa
- Type: React.js Web Application (Freelance Marketplace)
- Version: 0.1.0
- Main Technologies: React, Firebase, Tailwind CSS, React Router

================================================================================
ROOT DIRECTORY STRUCTURE:
================================================================================

📁 skillnusa/
├── 📁 .git/                          # Git version control
├── 📁 .vercel/                       # Vercel deployment configuration
├── 📁 build/                         # Production build files
├── 📁 node_modules/                  # NPM dependencies
├── 📁 public/                        # Static public assets
├── 📁 src/                           # Source code
├── 📄 .gitignore                     # Git ignore rules
├── 📄 COMPLETE_GIG_FIXES_SUMMARY.md  # Documentation
├── 📄 GIGS_FIXES_SUMMARY.md          # Documentation
├── 📄 QUICK_START.md                 # Quick start guide
├── 📄 README.md                      # Project documentation
├── 📄 USER_ACCOUNT_DELETION_GUIDE.md # User guide
├── 📄 debug.log                      # Debug log file
├── 📄 debug_fixes.md                 # Debug documentation
├── 📄 final_my_gigs_fix_summary.md   # Fix summary
├── 📄 package-lock.json              # NPM lock file
├── 📄 package.json                   # NPM configuration
├── 📄 postcss.config.js              # PostCSS configuration
├── 📄 tailwind.config.js             # Tailwind CSS configuration
└── 📄 vercel.json                    # Vercel deployment config

================================================================================
PUBLIC DIRECTORY (/public):
================================================================================

📁 public/
├── 📁 images/                        # Image assets
│   ├── 📄 guide-brief.jpg           # Guide image
│   ├── 📄 guide-communication.jpg   # Guide image
│   ├── 📄 guide-manage.jpg          # Guide image
│   ├── 📄 guide-porto.jpg           # Guide image
│   ├── 📄 guide-pricing.jpg         # Guide image
│   ├── 📄 guide-profile.jpg         # Guide image
│   ├── 📄 hero-typing.jpeg          # Hero image
│   ├── 📄 indonesia.jpg             # Indonesia image
│   ├── 📄 robot.png                 # Robot image
│   └── 📄 team.jpg                  # Team image
├── 📄 favicon.ico                    # Website favicon
├── 📄 index.html                     # Main HTML template
├── 📄 logo192.png                    # App logo 192px
├── 📄 logo512.png                    # App logo 512px
├── 📄 manifest.json                  # PWA manifest
└── 📄 robots.txt                     # SEO robots file

================================================================================
SOURCE CODE DIRECTORY (/src):
================================================================================

📁 src/
├── 📁 components/                    # React components
├── 📁 config/                        # Configuration files
├── 📁 context/                       # React context providers
├── 📁 data/                          # Static data files
├── 📁 firebase/                      # Firebase configuration
├── 📁 models/                        # Data models
├── 📁 pages/                         # Page components
├── 📁 repositories/                  # Data repositories
├── 📁 routes/                        # Route definitions
├── 📁 scripts/                       # Utility scripts
├── 📁 services/                      # Business logic services
├── 📁 styles/                        # CSS styles
├── 📁 utils/                         # Utility functions
├── 📁 validation/                    # Validation schemas
├── 📄 App.css                        # Main app styles
├── 📄 App.js                         # Main app component
├── 📄 App.test.js                    # App tests
├── 📄 index.css                      # Global styles
├── 📄 index.js                       # App entry point
├── 📄 logo.svg                       # Logo SVG
├── 📄 reportWebVitals.js             # Performance monitoring
└── 📄 setupTests.js                  # Test setup

================================================================================
MAIN APPLICATION FILES:
================================================================================

📄 src/index.js
FUNCTIONS:
- ReactDOM.createRoot() - Creates React root
- root.render() - Renders the app
- reportWebVitals() - Performance monitoring

📄 src/App.js
FUNCTIONS:
- App() - Main application component with routing
FEATURES:
- Router configuration with protected routes
- Role-based access control
- Dashboard routing for clients and freelancers
- Public and private route separation

📄 package.json
SCRIPTS:
- start - Start development server
- build - Build for production
- test - Run tests
- eject - Eject from Create React App
- db:clean - Clean database
- db:clean:quick - Quick database clean
- db:clean:full - Full database clean
- db:fix - Fix database issues
- db:cleanup-orphaned - Cleanup orphaned data
- db:seed - Seed database
- db:seed:users - Seed users only
- db:seed:gigs - Seed gigs only
- db:seed:reviews - Seed reviews only
- db:debug - Debug database

================================================================================
COMPONENTS DIRECTORY (/src/components):
================================================================================

📁 components/
├── 📁 Auth/                          # Authentication components
├── 📁 Layout/                        # Layout components
├── 📁 Profile/                       # Profile components
├── 📁 UI/                           # UI components
├── 📁 common/                        # Common components
├── 📄 AdminDashboardGuard.js         # Admin route guard
├── 📄 DashboardRedirect.js           # Dashboard redirect logic
├── 📄 FreelancerDashboardGuard.js    # Freelancer route guard
├── 📄 FreelancerRedirect.js          # Freelancer redirect logic
├── 📄 NavigationRoleHandler.js       # Navigation role handler
├── 📄 ProtectedRoute.js              # Protected route component
├── 📄 RoleRedirect.js                # Role-based redirect
└── 📄 RoleRoute.js                   # Role-based routing

COMPONENT FUNCTIONS:

📄 DashboardRedirect.js
- DashboardRedirect() - Redirects users to appropriate dashboard

📄 ProtectedRoute.js
- ProtectedRoute() - Protects routes requiring authentication

📄 RoleRoute.js
- RoleRoute() - Handles role-based access control

📄 NavigationRoleHandler.js
- NavigationRoleHandler() - Manages navigation based on user role

📄 FreelancerRedirect.js
- FreelancerRedirect() - Redirects freelancers to appropriate pages

================================================================================
AUTH COMPONENTS (/src/components/Auth):
================================================================================

📁 Auth/
├── 📁 steps/                         # Registration steps
│   ├── 📄 BasicAccountInfo.js       # Basic account information
│   ├── 📄 ProfileDetails.js         # Profile details step
│   ├── 📄 RoleSpecificInfo.js       # Role-specific information
│   └── 📄 TermsVerification.js      # Terms verification step
├── 📄 RegisterStep1.js               # Registration step 1
├── 📄 RegisterStep2.js               # Registration step 2
├── 📄 RegisterStep3.js               # Registration step 3
└── 📄 Registration.js                # Main registration component

AUTH COMPONENT FUNCTIONS:

📄 Registration.js
- Registration() - Main registration flow component

📄 RegisterStep1.js
- RegisterStep1() - First step of registration

📄 RegisterStep2.js
- RegisterStep2() - Second step of registration

📄 RegisterStep3.js
- RegisterStep3() - Third step of registration

📄 steps/BasicAccountInfo.js
- BasicAccountInfo() - Basic account information form

📄 steps/ProfileDetails.js
- ProfileDetails() - Profile details form

📄 steps/RoleSpecificInfo.js
- RoleSpecificInfo() - Role-specific information form

📄 steps/TermsVerification.js
- TermsVerification() - Terms and conditions verification

================================================================================
LAYOUT COMPONENTS (/src/components/Layout):
================================================================================

📁 Layout/
├── 📄 DashboardLayout.js             # Dashboard layout wrapper
├── 📄 Footer.js                      # Footer component
├── 📄 Header.js                      # Header component
└── 📄 PublicLayout.js                # Public pages layout

LAYOUT COMPONENT FUNCTIONS:

📄 DashboardLayout.js
- DashboardLayout() - Main dashboard layout with sidebar and navigation

📄 Header.js
- Header() - Application header with navigation and user menu

📄 Footer.js
- Footer() - Application footer

📄 PublicLayout.js
- PublicLayout() - Layout for public pages

================================================================================
COMMON COMPONENTS (/src/components/common):
================================================================================

📁 common/
├── 📄 Alert.js                       # Alert component
├── 📄 Button.js                      # Button component
├── 📄 Checkbox.js                    # Checkbox component
├── 📄 CheckboxGroup.js               # Checkbox group component
├── 📄 ErrorBoundary.js               # Error boundary component
├── 📄 GigCard.js                     # Gig card component
├── 📄 ImageUpload.js                 # Image upload component
├── 📄 Input.js                       # Input component
├── 📄 ProgressIndicator.js           # Progress indicator
├── 📄 RadioGroup.js                  # Radio group component
├── 📄 Select.js                      # Select component
├── 📄 TagInput.js                    # Tag input component
└── 📄 TextArea.js                    # Text area component

COMMON COMPONENT FUNCTIONS:

📄 Alert.js
- Alert() - Displays alert messages

📄 Button.js
- Button() - Reusable button component

📄 Checkbox.js
- Checkbox() - Checkbox input component

📄 CheckboxGroup.js
- CheckboxGroup() - Group of checkboxes

📄 ErrorBoundary.js
- ErrorBoundary() - Catches and displays React errors

📄 GigCard.js
- GigCard() - Displays gig information in card format

📄 ImageUpload.js
- ImageUpload() - Handles image upload functionality

📄 Input.js
- Input() - Text input component

📄 ProgressIndicator.js
- ProgressIndicator() - Shows progress steps

📄 RadioGroup.js
- RadioGroup() - Group of radio buttons

📄 Select.js
- Select() - Dropdown select component

📄 TagInput.js
- TagInput() - Input for tags/skills

📄 TextArea.js
- TextArea() - Multi-line text input

================================================================================
UI COMPONENTS (/src/components/UI):
================================================================================

📁 UI/
├── 📄 FreelancerCTA.js               # Freelancer call-to-action
├── 📄 LoadingSpinner.js              # Loading spinner
├── 📄 MeshGradientBackground.js      # Mesh gradient background
└── 📄 ParticleBackground.js          # Particle animation background

UI COMPONENT FUNCTIONS:

📄 FreelancerCTA.js
- FreelancerCTA() - Call-to-action for becoming a freelancer

📄 LoadingSpinner.js
- LoadingSpinner() - Loading animation component

📄 MeshGradientBackground.js
- MeshGradientBackground() - Animated gradient background

📄 ParticleBackground.js
- ParticleBackground() - Particle animation background

================================================================================
PROFILE COMPONENTS (/src/components/Profile):
================================================================================

📁 Profile/
├── 📄 BecomeFreelancerStep1.js       # Become freelancer step 1
├── 📄 BecomeFreelancerStep2.js       # Become freelancer step 2
├── 📄 BecomeFreelancerStep3.js       # Become freelancer step 3
├── 📄 BecomeFreelancerStep4.js       # Become freelancer step 4
└── 📄 DeleteAccountModal.js          # Delete account modal

PROFILE COMPONENT FUNCTIONS:

📄 BecomeFreelancerStep1.js
- BecomeFreelancerStep1() - First step to become freelancer

📄 BecomeFreelancerStep2.js
- BecomeFreelancerStep2() - Second step to become freelancer

📄 BecomeFreelancerStep3.js
- BecomeFreelancerStep3() - Third step to become freelancer

📄 BecomeFreelancerStep4.js
- BecomeFreelancerStep4() - Fourth step to become freelancer

📄 DeleteAccountModal.js
- DeleteAccountModal() - Modal for account deletion

================================================================================
PAGES DIRECTORY (/src/pages):
================================================================================

📁 pages/
├── 📁 Auth/                          # Authentication pages
├── 📁 Dashboard/                     # Dashboard pages
├── 📁 Profile/                       # Profile pages
├── 📄 About.js                       # About page
├── 📄 Browse.js                      # Browse gigs page
├── 📄 Cart.js                        # Shopping cart page
├── 📄 Checkout.js                    # Checkout page
├── 📄 Contact.js                     # Contact page
├── 📄 Favorites.js                   # Favorites page
├── 📄 GigDetail.js                   # Gig detail page
├── 📄 Home.js                        # Home page
├── 📄 Messages.js                    # Messages page
├── 📄 NotFound.js                    # 404 page
├── 📄 SeedingPage.js                 # Database seeding page
├── 📄 Settings.js                    # Settings page
├── 📄 TestPopulate.js                # Test population page
└── 📄 Transactions.js                # Transactions page

PAGE FUNCTIONS:

📄 About.js
- About() - About page component

📄 Browse.js
- Browse() - Browse gigs with filtering and search

📄 Cart.js
- Cart() - Shopping cart functionality

📄 Checkout.js
- Checkout() - Checkout process

📄 Contact.js
- Contact() - Contact form and information

📄 Favorites.js
- Favorites() - User's favorite gigs

📄 GigDetail.js
- GigDetail() - Detailed gig view with booking

📄 Home.js
- Home() - Landing page with hero section

📄 Messages.js
- Messages() - Messaging system

📄 NotFound.js
- NotFound() - 404 error page

📄 SeedingPage.js
- SeedingPage() - Database seeding interface

📄 Settings.js
- Settings() - User settings page

📄 TestPopulate.js
- TestPopulate() - Test data population

📄 Transactions.js
- Transactions() - Transaction history

================================================================================
AUTH PAGES (/src/pages/Auth):
================================================================================

📁 Auth/
├── 📄 ForgotPassword.js              # Forgot password page
├── 📄 Login.js                       # Login page
├── 📄 Register.js                    # Registration page
└── 📄 VerifyEmail.js                 # Email verification page

AUTH PAGE FUNCTIONS:

📄 ForgotPassword.js
- ForgotPassword() - Password reset functionality

📄 Login.js
- Login() - User login form and authentication

📄 Register.js
- Register() - User registration process

📄 VerifyEmail.js
- VerifyEmail() - Email verification process

================================================================================
DASHBOARD PAGES (/src/pages/Dashboard):
================================================================================

📁 Dashboard/
├── 📄 ClientCart.js                  # Client cart dashboard
├── 📄 ClientDashboard.js             # Client main dashboard
├── 📄 ClientFavorites.js             # Client favorites dashboard
├── 📄 ClientMessages.js              # Client messages dashboard
├── 📄 ClientTransactions.js          # Client transactions dashboard
├── 📄 CreateGig.js                   # Create/edit gig page
├── 📄 FreelancerAnalytics.js         # Freelancer analytics dashboard
├── 📄 FreelancerChat.js              # Freelancer chat dashboard
├── 📄 FreelancerDashboard.js         # Freelancer main dashboard
├── 📄 FreelancerGigs.js              # Freelancer gigs management
├── 📄 FreelancerGuides.js            # Freelancer guides page
├── 📄 FreelancerNotifications.js     # Freelancer notifications
├── 📄 FreelancerOrders.js            # Freelancer orders management
├── 📄 FreelancerSettings.js          # Freelancer settings
└── 📄 FreelancerWallet.js            # Freelancer wallet/earnings

DASHBOARD PAGE FUNCTIONS:

📄 ClientCart.js
- ClientCart() - Client cart management

📄 ClientDashboard.js
- ClientDashboard() - Main client dashboard with overview

📄 ClientFavorites.js
- ClientFavorites() - Client favorites management

📄 ClientMessages.js
- ClientMessages() - Client messaging interface

📄 ClientTransactions.js
- ClientTransactions() - Client transaction history

📄 CreateGig.js
- CreateGig() - Create and edit gig functionality

📄 FreelancerAnalytics.js
- FreelancerAnalytics() - Analytics and performance metrics

📄 FreelancerChat.js
- FreelancerChat() - Freelancer chat interface

📄 FreelancerDashboard.js
- FreelancerDashboard() - Main freelancer dashboard

📄 FreelancerGigs.js
- FreelancerGigs() - Gig management for freelancers

📄 FreelancerGuides.js
- FreelancerGuides() - Help guides for freelancers

📄 FreelancerNotifications.js
- FreelancerNotifications() - Notification management

📄 FreelancerOrders.js
- FreelancerOrders() - Order management for freelancers

📄 FreelancerSettings.js
- FreelancerSettings() - Freelancer account settings

📄 FreelancerWallet.js
- FreelancerWallet() - Earnings and wallet management

================================================================================
PROFILE PAGES (/src/pages/Profile):
================================================================================

📁 Profile/
├── 📄 BecomeFreelancer.js            # Become freelancer process
├── 📄 EditProfile.js                 # Edit profile page
└── 📄 Profile.js                     # Profile view page

PROFILE PAGE FUNCTIONS:

📄 BecomeFreelancer.js
- BecomeFreelancer() - Multi-step freelancer registration

📄 EditProfile.js
- EditProfile() - Profile editing functionality

📄 Profile.js
- Profile() - Profile display and management

================================================================================
SERVICES DIRECTORY (/src/services):
================================================================================

📁 services/
├── 📄 AuthService.js                 # Authentication service
├── 📄 BaseService.js                 # Base service class
├── 📄 ProjectService.js              # Project management service
├── 📄 UserService.js                 # User management service
├── 📄 cartService.js                 # Shopping cart service
├── 📄 chatService.js                 # Chat/messaging service
├── 📄 cloudinaryService.js           # Image upload service
├── 📄 favoriteService.js             # Favorites management service
├── 📄 firebaseService.js             # Firebase operations service
├── 📄 freelancerService.js           # Freelancer-specific service
├── 📄 gigService.js                  # Gig management service
├── 📄 index.js                       # Service exports
├── 📄 orderService.js                # Order management service
├── 📄 profileService.js              # Profile management service
├── 📄 reviewService.js               # Review system service
├── 📄 userDeletionService.js         # User deletion service
├── 📄 userProfileService.js          # User profile service
└── 📄 validationService.js           # Validation service

SERVICE FUNCTIONS:

📄 AuthService.js
- AuthService class with authentication methods
- login(), register(), logout(), resetPassword()

📄 BaseService.js
- BaseService class with common CRUD operations
- create(), read(), update(), delete(), query()

📄 ProjectService.js
- ProjectService class for project management
- createProject(), updateProject(), deleteProject(), getProjects()

📄 UserService.js
- UserService class for user management
- getUser(), updateUser(), deleteUser(), getUserProfile()

📄 cartService.js
- CartService class for shopping cart
- addToCart(), removeFromCart(), updateQuantity(), getCart(), clearCart()

📄 chatService.js
- ChatService class for messaging
- sendMessage(), getMessages(), createChat(), deleteChat()

📄 cloudinaryService.js
- CloudinaryService class for image management
- uploadImage(), deleteImage(), transformImage()
- validateConfig(), buildTransformationString()

📄 favoriteService.js
- FavoriteService class for favorites
- addFavorite(), removeFavorite(), getFavorites(), isFavorite()

📄 firebaseService.js
- FirebaseService class for Firebase operations
- batchWrite(), transaction(), query(), realTimeListener()
- sleep() utility function

📄 freelancerService.js
- FreelancerService class for freelancer operations
- getFreelancerProfile(), updateFreelancerProfile()

📄 gigService.js
- GigService class for gig management
- createGig(), updateGig(), deleteGig(), getGigs(), searchGigs()
- applyFiltersAndSort(), getFreelancerData()

📄 orderService.js
- OrderService class for order management
- createOrder(), updateOrder(), getOrders(), cancelOrder()

📄 profileService.js
- ProfileService class for profile management
- getProfile(), updateProfile(), uploadProfileImage()

📄 reviewService.js
- ReviewService class for review system
- createReview(), updateReview(), getReviews(), deleteReview()

📄 userDeletionService.js
- UserDeletionService class for account deletion
- deleteUserAccount(), cleanupUserData(), validateDeletion()

📄 userProfileService.js
- UserProfileService class for user profiles
- getUserProfile(), updateUserProfile(), getPublicProfile()

📄 validationService.js
- ValidationService class for data validation
- validateGig(), validateProfile(), validateOrder()

================================================================================
CONTEXT DIRECTORY (/src/context):
================================================================================

📁 context/
├── 📄 AuthContext.js                 # Authentication context
└── 📄 RegistrationContext.js         # Registration context

CONTEXT FUNCTIONS:

📄 AuthContext.js
- AuthContext - Authentication context
- AuthProvider() - Authentication provider component
- useAuth() hook for accessing auth state

📄 RegistrationContext.js
- RegistrationContext - Registration flow context
- RegistrationProvider() - Registration provider component

================================================================================
MODELS DIRECTORY (/src/models):
================================================================================

📁 models/
├── 📄 BaseModel.js                   # Base model class
├── 📄 Chat.js                        # Chat model
├── 📄 ClientProfile.js               # Client profile model
├── 📄 Favorite.js                    # Favorite model
├── 📄 FreelancerProfile.js           # Freelancer profile model
├── 📄 Order.js                       # Order model
├── 📄 Profile.js                     # Profile model
├── 📄 Project.js                     # Project model
├── 📄 Proposal.js                    # Proposal model
├── 📄 User.js                        # User model
└── 📄 index.js                       # Model exports

MODEL CLASSES:

📄 BaseModel.js
- BaseModel class with common model functionality

📄 Chat.js
- Chat model for messaging system

📄 ClientProfile.js
- ClientProfile model for client-specific data

📄 Favorite.js
- Favorite model for user favorites

📄 FreelancerProfile.js
- FreelancerProfile model for freelancer-specific data

📄 Order.js
- Order model for order management

📄 Profile.js
- Profile model for user profiles

📄 Project.js
- Project model for project management

📄 Proposal.js
- Proposal model for project proposals

📄 User.js
- User model for user data

================================================================================
REPOSITORIES DIRECTORY (/src/repositories):
================================================================================

📁 repositories/
├── 📄 BaseRepository.js              # Base repository class
├── 📄 ClientProfileRepository.js     # Client profile repository
├── 📄 FreelancerProfileRepository.js # Freelancer profile repository
├── 📄 ProfileRepository.js           # Profile repository
├── 📄 ProjectRepository.js           # Project repository
├── 📄 ProposalRepository.js          # Proposal repository
├── 📄 UserRepository.js              # User repository
└── 📄 index.js                       # Repository exports

REPOSITORY CLASSES:

📄 BaseRepository.js
- BaseRepository class with common database operations
- create(), read(), update(), delete(), query(), paginate()

📄 ClientProfileRepository.js
- ClientProfileRepository for client profile data access

📄 FreelancerProfileRepository.js
- FreelancerProfileRepository for freelancer profile data access

📄 ProfileRepository.js
- ProfileRepository for general profile data access

📄 ProjectRepository.js
- ProjectRepository for project data access

📄 ProposalRepository.js
- ProposalRepository for proposal data access

📄 UserRepository.js
- UserRepository for user data access

================================================================================
UTILS DIRECTORY (/src/utils):
================================================================================

📁 utils/
├── 📄 constants.js                   # Application constants
├── 📄 errors.js                      # Error handling utilities
├── 📄 helpers.js                     # Helper functions
├── 📄 logger.js                      # Logging utilities
├── 📄 testHelpers.js                 # Testing utilities
└── 📄 validation.js                  # Validation utilities

UTILITY FUNCTIONS:

📄 constants.js
- Application-wide constants and enums

📄 errors.js
- Error classes and error handling utilities

📄 helpers.js
- General helper functions

📄 logger.js
- Logging functionality for debugging

📄 testHelpers.js
- Utilities for testing

📄 validation.js
- Validation functions and schemas

================================================================================
SCRIPTS DIRECTORY (/src/scripts):
================================================================================

📁 scripts/
├── 📄 cleanDatabase.js               # Database cleaning script
├── 📄 cleanupOrphanedData.js         # Orphaned data cleanup
├── 📄 debugSeeding.js                # Debug seeding script
├── 📄 populateGigs.js                # Gig population script
├── 📄 runCleanup.js                  # Run cleanup script
├── 📄 runDebug.js                    # Debug runner script
├── 📄 runSeeding.js                  # Seeding runner script
├── 📄 runSeeding.jsx                 # JSX seeding runner
├── 📄 seedData.js                    # Seed data definitions
└── 📄 testGigService.js              # Gig service testing

SCRIPT FUNCTIONS:

📄 cleanDatabase.js
- clearCollection() - Clear specific collection
- migrateCollection() - Migrate collection data
- collectionExists() - Check if collection exists
- cleanDatabase() - Main cleanup function
- quickClean() - Quick database clean
- fullClean() - Full database clean
- fixNaming() - Fix naming issues

📄 cleanupOrphanedData.js
- runOrphanedDataCleanup() - Clean orphaned data

📄 runCleanup.js
- main() - Main cleanup runner

📄 runDebug.js
- checkGigs() - Debug gigs collection
- checkUsers() - Debug users collection
- checkFreelancerProfiles() - Debug freelancer profiles
- checkReviews() - Debug reviews collection
- debugAll() - Run all debug checks
- main() - Main debug runner

📄 runSeeding.js
- main() - Main seeding runner

📄 populateGigs.js
- populateGigsData() - Populate gigs with sample data

📄 testGigService.js
- testGigService() - Test gig service functionality

================================================================================
DATA DIRECTORY (/src/data):
================================================================================

📁 data/
├── 📄 cities.js                      # Indonesian cities data
├── 📄 industries.js                  # Industry categories
└── 📄 skills.js                      # Skills and technologies

DATA EXPORTS:

📄 cities.js
- Indonesian cities array for location selection

📄 industries.js
- Industry categories for freelancer specialization

📄 skills.js
- Skills and technologies for freelancer profiles

================================================================================
CONFIGURATION DIRECTORY (/src/config):
================================================================================

📁 config/
└── 📄 cloudinary.js                  # Cloudinary configuration

CONFIG FUNCTIONS:

📄 cloudinary.js
- Cloudinary service configuration and setup

================================================================================
FIREBASE DIRECTORY (/src/firebase):
================================================================================

📁 firebase/
└── 📄 config.js                      # Firebase configuration

FIREBASE CONFIG:

📄 config.js
- Firebase app initialization and configuration
- Database and authentication setup

================================================================================
VALIDATION DIRECTORY (/src/validation):
================================================================================

📁 validation/
└── 📄 registrationSchema.js          # Registration validation schema

VALIDATION SCHEMAS:

📄 registrationSchema.js
- phoneRegExp - Phone number validation regex
- urlRegExp - URL validation regex
- Registration form validation schemas

================================================================================
ROUTES DIRECTORY (/src/routes):
================================================================================

📁 routes/
└── 📄 index.js                       # Route constants

ROUTE DEFINITIONS:

📄 index.js
- ROUTES object with all application route constants

================================================================================
STYLES DIRECTORY (/src/styles):
================================================================================

📁 styles/
└── 📄 MeshGradient.css               # Mesh gradient animations

STYLE FILES:

📄 MeshGradient.css
- CSS animations for mesh gradient backgrounds

================================================================================
BUILD DIRECTORY (/build):
================================================================================

📁 build/
├── 📁 images/                        # Optimized images
├── 📁 static/                        # Static assets
│   ├── 📁 css/                      # Compiled CSS
│   └── 📁 js/                       # Compiled JavaScript
├── 📄 asset-manifest.json            # Asset manifest
├── 📄 favicon.ico                    # Favicon
├── 📄 index.html                     # Main HTML file
├── 📄 logo192.png                    # Logo 192px
├── 📄 logo512.png                    # Logo 512px
├── 📄 manifest.json                  # PWA manifest
└── 📄 robots.txt                     # SEO robots file

================================================================================
KEY FEATURES AND FUNCTIONALITY:
================================================================================

AUTHENTICATION SYSTEM:
- User registration with role selection (Client/Freelancer)
- Email verification
- Password reset functionality
- Protected routes with role-based access

USER ROLES:
- Client: Can browse, purchase, and manage gigs
- Freelancer: Can create, manage gigs and handle orders
- Admin: Administrative access (planned)

FREELANCER FEATURES:
- Multi-step freelancer registration
- Gig creation and management
- Order management
- Analytics and earnings tracking
- Chat system for client communication
- Profile management with portfolio

CLIENT FEATURES:
- Browse and search gigs
- Favorites system
- Shopping cart functionality
- Order tracking
- Messaging system
- Transaction history

TECHNICAL FEATURES:
- Firebase backend integration
- Cloudinary image management
- Real-time messaging
- Responsive design with Tailwind CSS
- Error boundaries and error handling
- Database seeding and cleanup scripts
- Comprehensive validation system

================================================================================
DEVELOPMENT TOOLS:
================================================================================

TESTING:
- Jest testing framework
- React Testing Library
- Custom test helpers

DEVELOPMENT SCRIPTS:
- Database seeding and cleanup
- Debug utilities
- Data population scripts

DEPLOYMENT:
- Vercel deployment configuration
- Production build optimization
- PWA support

================================================================================
DATABASE STRUCTURE (FIREBASE FIRESTORE):
================================================================================

OVERVIEW:
- Database Type: Firebase Firestore (NoSQL Document Database)
- Collections: 12 main collections
- Relationships: Referenced through document IDs
- Authentication: Firebase Authentication integration

================================================================================
COLLECTION STRUCTURE:
================================================================================

📁 FIRESTORE COLLECTIONS:
├── 🗂️ users                          # User accounts and basic info
├── 🗂️ freelancerProfiles             # Freelancer-specific data
├── 🗂️ clientProfiles                 # Client-specific data  
├── 🗂️ gigs                           # Freelancer services/gigs
├── 🗂️ orders                         # Order transactions
├── 🗂️ chats                          # Chat conversations
├── 🗂️ messages                       # Individual chat messages
├── 🗂️ reviews                        # Gig reviews and ratings
├── 🗂️ projects                       # Client projects (future feature)
├── 🗂️ proposals                      # Project proposals (future feature)
├── 🗂️ conversations                  # Legacy conversation collection
└── 🗂️ notifications                  # User notifications

================================================================================
DETAILED COLLECTION SCHEMAS:
================================================================================

🗂️ USERS COLLECTION:
Document ID: Firebase Auth UID
├── uid: string (Firebase Auth UID)
├── email: string (user email address)
├── username: string (unique username)
├── displayName: string (full display name)
├── fullName: string (full name)
├── phoneNumber: string (phone with country code)
├── gender: string (Male/Female/Other)
├── birthDate: timestamp (date of birth)
├── profilePhoto: string (image URL)
├── bio: string (user biography)
├── location: string (city/region)
├── isFreelancer: boolean (quick role check)
├── roles: array[string] (user roles: freelancer, client, admin)
├── isActive: boolean (account status)
├── emailVerified: boolean (email verification status)
├── createdAt: timestamp (account creation)
└── updatedAt: timestamp (last profile update)

RELATIONSHIPS:
- 1:1 with freelancerProfiles (if isFreelancer = true)
- 1:1 with clientProfiles (if isFreelancer = false)
- 1:N with gigs (freelancer can have multiple gigs)
- 1:N with orders (user can have multiple orders)
- 1:N with reviews (user can write multiple reviews)

🗂️ FREELANCER_PROFILES COLLECTION:
Document ID: Auto-generated or User UID
├── userId: string (reference to users collection)
├── title: string (professional title)
├── skills: array[string] (list of skills)
├── categories: array[string] (service categories)
├── experienceLevel: string (beginner/intermediate/expert)
├── hourlyRate: number (hourly rate in rupiah)
├── availability: string (full-time/part-time/weekends)
├── location: string (city/region)
├── bio: string (professional biography)
├── profilePhoto: string (profile image URL)
├── completedProjects: number (total completed projects)
├── rating: number (average rating 0-5)
├── totalReviews: number (count of reviews)
├── tier: string (bronze/silver/gold/platinum)
├── education: array[object] (education history)
│   ├── degree: string
│   ├── institution: string
│   └── year: string
├── workExperience: array[object] (work history)
│   ├── position: string
│   ├── company: string
│   ├── duration: string
│   └── description: string
├── portfolio: array[object] (portfolio items)
│   ├── title: string
│   ├── description: string
│   ├── imageUrl: string
│   └── projectUrl: string
├── certifications: array[object] (certifications)
│   ├── name: string
│   ├── issuer: string
│   └── year: string
├── languages: array[object] (spoken languages)
│   ├── language: string
│   └── proficiency: string
├── socialLinks: object (social media links)
│   ├── website: string
│   ├── linkedin: string
│   ├── github: string
│   └── behance: string
├── services: array[string] (list of services offered)
├── createdAt: timestamp
└── updatedAt: timestamp

🗂️ CLIENT_PROFILES COLLECTION:
Document ID: Auto-generated or User UID
├── userId: string (reference to users collection)
├── companyName: string (company/organization name)
├── industry: string (business industry)
├── companySize: string (startup/small/medium/large)
├── location: string (city/region)
├── bio: string (company description)
├── website: string (company website URL)
├── totalOrders: number (count of orders placed)
├── totalSpent: number (total amount spent)
├── preferredCategories: array[string] (preferred service categories)
├── createdAt: timestamp
└── updatedAt: timestamp

🗂️ GIGS COLLECTION:
Document ID: Auto-generated
├── freelancerId: string (reference to users collection)
├── userId: string (alternative reference to users collection)
├── title: string (gig title)
├── description: string (detailed gig description)
├── category: string (main service category)
├── subcategory: string (specific service subcategory)
├── tags: array[string] (searchable tags)
├── images: array[string] (gig image URLs)
├── packages: object (pricing packages)
│   ├── basic: object
│   │   ├── name: string (package name)
│   │   ├── description: string (package description)
│   │   ├── price: number (price in rupiah)
│   │   ├── deliveryTime: number (delivery days)
│   │   ├── revisions: number (number of revisions)
│   │   └── features: array[string] (package features)
│   ├── standard: object (same structure as basic)
│   └── premium: object (same structure as basic)
├── isActive: boolean (gig availability status)
├── rating: number (average rating 0-5)
├── totalOrders: number (count of orders)
├── totalReviews: number (count of reviews)
├── inQueue: number (orders in progress)
├── status: string (active/paused/draft)
├── createdAt: timestamp
└── updatedAt: timestamp

RELATIONSHIPS:
- N:1 with users (freelancer)
- 1:N with orders
- 1:N with reviews

🗂️ ORDERS COLLECTION:
Document ID: Auto-generated
├── clientId: string (reference to users collection)
├── freelancerId: string (reference to users collection)
├── gigId: string (reference to gigs collection)
├── packageType: string (basic/standard/premium)
├── title: string (order title)
├── description: string (order description)
├── price: number (final price in rupiah)
├── deliveryTime: string (expected delivery time)
├── revisions: number (number of revisions included)
├── status: string (pending/in_progress/in_review/completed/cancelled/dispute)
├── requirements: string (client requirements)
├── paymentStatus: string (pending/paid/refunded)
├── deliveryDate: timestamp (expected delivery date)
├── completedAt: timestamp (completion timestamp)
├── createdAt: timestamp
└── updatedAt: timestamp

ORDER STATUS FLOW:
pending → in_progress → in_review → completed
                     ↘ cancelled
                     ↘ dispute

RELATIONSHIPS:
- N:1 with users (client)
- N:1 with users (freelancer)
- N:1 with gigs
- 1:1 with chats (order-specific chat)

🗂️ CHATS COLLECTION:
Document ID: Auto-generated
├── participants: array[string] (user IDs in conversation)
├── lastMessage: string (latest message content)
├── lastMessageTime: timestamp (latest message timestamp)
├── lastMessageSender: string (sender user ID)
├── unreadCount: object (unread count per user)
│   └── [userId]: number (unread count for specific user)
├── orderId: string (reference to orders collection, optional)
├── gigId: string (reference to gigs collection, optional)
├── isActive: boolean (chat status)
├── createdAt: timestamp
└── updatedAt: timestamp

🗂️ MESSAGES COLLECTION:
Document ID: Auto-generated
├── chatId: string (reference to chats collection)
├── senderId: string (sender user ID)
├── content: string (message content)
├── messageType: string (text/image/file/system)
├── fileUrl: string (file URL for file messages)
├── fileName: string (original file name)
├── isRead: boolean (read status)
├── readBy: array[string] (user IDs who read the message)
└── createdAt: timestamp

RELATIONSHIPS:
- N:1 with chats
- N:1 with users (sender)

🗂️ REVIEWS COLLECTION:
Document ID: Auto-generated
├── clientId: string (reference to users collection)
├── freelancerId: string (reference to users collection)
├── gigId: string (reference to gigs collection)
├── orderId: string (reference to orders collection)
├── rating: number (rating 1-5)
├── comment: string (review text)
├── response: string (freelancer response, optional)
├── isVisible: boolean (review visibility)
├── isReported: boolean (reported status)
├── createdAt: timestamp
└── updatedAt: timestamp

🗂️ PROJECTS COLLECTION (Future Feature):
Document ID: Auto-generated
├── title: string (project title)
├── description: string (project description)
├── clientId: string (reference to users collection)
├── freelancerId: string (assigned freelancer, optional)
├── budget: number (project budget)
├── deadline: timestamp (project deadline)
├── status: string (draft/open/in_progress/completed/cancelled)
├── skills: array[string] (required skills)
├── attachments: array[string] (file URLs)
├── category: string (project category)
├── proposals: array[string] (proposal IDs)
├── isPublic: boolean (visibility status)
├── createdAt: timestamp
└── updatedAt: timestamp

🗂️ PROPOSALS COLLECTION (Future Feature):
Document ID: Auto-generated
├── projectId: string (reference to projects collection)
├── freelancerId: string (reference to users collection)
├── coverLetter: string (proposal cover letter)
├── proposedBudget: number (proposed budget)
├── estimatedDuration: number (estimated days)
├── milestones: array[object] (project milestones)
├── attachments: array[string] (file URLs)
├── status: string (pending/accepted/rejected/withdrawn)
├── createdAt: timestamp
└── updatedAt: timestamp

🗂️ NOTIFICATIONS COLLECTION:
Document ID: Auto-generated
├── userId: string (recipient user ID)
├── type: string (order_update/message/review/system)
├── title: string (notification title)
├── message: string (notification message)
├── data: object (additional notification data)
├── isRead: boolean (read status)
├── createdAt: timestamp
└── readAt: timestamp (read timestamp)

================================================================================
DATABASE RELATIONSHIPS & INDEXES:
================================================================================

PRIMARY RELATIONSHIPS:
┌─────────────────┐    1:N    ┌─────────────────┐
│      Users      │ ────────→ │      Gigs       │
└─────────────────┘           └─────────────────┘
         │                             │
         │ 1:1                         │ 1:N
         ↓                             ↓
┌─────────────────┐           ┌─────────────────┐
│FreelancerProfile│           │     Orders      │
└─────────────────┘           └─────────────────┘
                                       │
                                       │ 1:1
                                       ↓
                              ┌─────────────────┐
                              │      Chats      │
                              └─────────────────┘
                                       │
                                       │ 1:N
                                       ↓
                              ┌─────────────────┐
                              │    Messages     │
                              └─────────────────┘

FIRESTORE INDEXES (Auto-created):
- gigs: category, isActive, createdAt
- orders: clientId, freelancerId, status
- messages: chatId, createdAt
- reviews: gigId, freelancerId
- users: email, username

QUERY PATTERNS:
1. Get freelancer gigs: WHERE freelancerId == userId AND isActive == true
2. Get user orders: WHERE clientId == userId ORDER BY createdAt DESC
3. Get gig reviews: WHERE gigId == gigId ORDER BY createdAt DESC
4. Get chat messages: WHERE chatId == chatId ORDER BY createdAt ASC

================================================================================
DATA VALIDATION RULES:
================================================================================

FIRESTORE SECURITY RULES:
- Users can only read/write their own data
- Gigs are publicly readable, only writable by owner
- Orders readable by client/freelancer only
- Messages readable by chat participants only
- Reviews readable by all, writable by order client only

BUSINESS LOGIC VALIDATION:
- Price minimum: 50,000 IDR
- Delivery time: 1-30 days
- Revisions: 0-unlimited
- Package types: basic, standard, premium (required)
- Order status transitions follow defined workflow

================================================================================
DATABASE SEEDING DATA:
================================================================================

SEED DATA STRUCTURE:
├── 10 Freelancers (various skills and experience levels)
├── 5 Clients (different company types and sizes)
├── 20 Gigs (across multiple categories)
├── 50+ Orders (various statuses and packages)
├── 100+ Reviews (realistic ratings and comments)
└── Sample Chat/Message data

GIGS CATEGORIES:
- Design & Creative (UI/UX, Logo, Graphic Design)
- Programming & Tech (Web Dev, Mobile, Database, API)
- Writing & Translation (Content, SEO, Translation)
- Digital Marketing (SEO, Social Media, Analytics)
- Video & Animation (Editing, Motion Graphics, 2D Animation)
- Music & Audio (Voice Over, Podcast Production)
- Business (Consulting, Virtual Assistant, Business Plans)

SAMPLE PACKAGE PRICING:
Basic Packages: 150K - 800K IDR
Standard Packages: 300K - 2.5M IDR  
Premium Packages: 500K - 7.5M IDR

================================================================================
PERFORMANCE CONSIDERATIONS:
================================================================================

OPTIMIZATION STRATEGIES:
- Document size kept under 1MB limit
- Array fields limited to reasonable sizes
- Denormalization for frequently accessed data
- Pagination for large collections (orders, messages)
- Caching for static data (skills, categories, cities)

REAL-TIME FEATURES:
- Chat messages: Real-time listeners
- Order status updates: Real-time notifications  
- Gig availability: Real-time updates

BACKUP & MAINTENANCE:
- Automated daily backups
- Data cleanup scripts for orphaned records
- Performance monitoring for query optimization

================================================================================
END OF DOCUMENTATION
================================================================================

This comprehensive documentation covers all directories, files, and functions
in the SkillNusa project. The application is a full-featured freelance
marketplace built with React.js and Firebase, supporting both clients and
freelancers with complete user management, gig marketplace, and communication
systems. 