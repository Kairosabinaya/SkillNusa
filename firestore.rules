rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      // Users can read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow querying users for validation, preferences and user lookups
    match /users/{document=**} {
      // Allow read access for user preferences, lookups, and validation
      allow read: if true;
    }

    // Client profiles - users can read and write their own
    match /clientProfiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Freelancer profiles - public read access for showcase, owners can write
    match /freelancerProfiles/{userId} {
      // Allow public read access so freelancer info can be displayed on gig pages
      allow read: if true;
      // Only the freelancer can write their own profile
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Gigs - public read access for showcase, owners can write
    match /gigs/{gigId} {
      // Allow public read access so unauthenticated users can browse gigs
      allow read: if true;
      // Allow authenticated users to create new gigs
      allow create: if request.auth != null && 
        (request.auth.uid == request.resource.data.freelancerId || 
         request.auth.uid == request.resource.data.userId);
      // Only authenticated users who own the gig can update/delete
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.freelancerId || 
         request.auth.uid == resource.data.userId);
    }

    // Orders - only involved parties can access
    match /orders/{orderId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.clientId || 
         request.auth.uid == resource.data.freelancerId ||
         request.auth.uid == resource.data.sellerId);
    }

    // Allow querying orders by user (for transaction history and analytics)
    match /orders/{document=**} {
      allow read: if request.auth != null;
    }

    // Reviews - public read access for showcase, only clients can write
    match /reviews/{reviewId} {
      // Allow public read access so reviews can be displayed on gig pages
      allow read: if true;
      // Only authenticated clients can write reviews
      allow write: if request.auth != null && request.auth.uid == resource.data.clientId;
    }

    // Favorites - users can only access their own
    match /favorites/{favoriteId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Cart items - users can only access their own
    match /cartItems/{cartItemId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Chats - only participants can access
    match /chats/{chatId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid in resource.data.participants ||
         chatId.matches(request.auth.uid + '_.*') ||
         chatId.matches('.*_' + request.auth.uid + '_.*'));
    }

    // Messages - only chat participants can access
    match /messages/{messageId} {
      allow read, write: if request.auth != null;
      // Note: Additional validation should be done in app logic
    }

    // Notifications - users can only access their own
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Withdrawals - users can only access their own withdrawal requests
    match /withdrawals/{withdrawalId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Allow querying withdrawals by user
    match /withdrawals/{document=**} {
      allow read: if request.auth != null;
    }

    // Transactions - users can only access their own transaction history
    match /transactions/{transactionId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // SkillBot conversations - users can only access their own
    match /skillbotConversations/{conversationId} {
      allow read, write: if request.auth != null && 
        conversationId.matches(request.auth.uid + '_.*');
    }

    // SkillBot conversations (lowercase) - users can only access their own
    match /skillbotconversations/{conversationId} {
      allow read, write: if request.auth != null && 
        conversationId.matches(request.auth.uid + '_.*');
    }
  }
} 